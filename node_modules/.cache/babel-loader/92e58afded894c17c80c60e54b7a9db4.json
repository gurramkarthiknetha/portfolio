{"ast":null,"code":"import _objectSpread from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"autoplay\", \"delay\", \"type\", \"repeat\", \"repeatDelay\", \"repeatType\"];\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n/**\n * Maximum time allowed between an animation being created and it being\n * resolved for us to use the latter as the start time.\n *\n * This is to ensure that while we prefer to \"start\" an animation as soon\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\n * between these two moments.\n */\n\nvar MAX_RESOLVE_DELAY = 40;\n\nvar BaseAnimation = /*#__PURE__*/function () {\n  function BaseAnimation(_ref) {\n    var _ref$autoplay = _ref.autoplay,\n        autoplay = _ref$autoplay === void 0 ? true : _ref$autoplay,\n        _ref$delay = _ref.delay,\n        delay = _ref$delay === void 0 ? 0 : _ref$delay,\n        _ref$type = _ref.type,\n        type = _ref$type === void 0 ? \"keyframes\" : _ref$type,\n        _ref$repeat = _ref.repeat,\n        repeat = _ref$repeat === void 0 ? 0 : _ref$repeat,\n        _ref$repeatDelay = _ref.repeatDelay,\n        repeatDelay = _ref$repeatDelay === void 0 ? 0 : _ref$repeatDelay,\n        _ref$repeatType = _ref.repeatType,\n        repeatType = _ref$repeatType === void 0 ? \"loop\" : _ref$repeatType,\n        options = _objectWithoutProperties(_ref, _excluded);\n\n    _classCallCheck(this, BaseAnimation);\n\n    // Track whether the animation has been stopped. Stopped animations won't restart.\n    this.isStopped = false;\n    this.hasAttemptedResolve = false;\n    this.createdAt = time.now();\n    this.options = _objectSpread({\n      autoplay: autoplay,\n      delay: delay,\n      type: type,\n      repeat: repeat,\n      repeatDelay: repeatDelay,\n      repeatType: repeatType\n    }, options);\n    this.updateFinishedPromise();\n  }\n  /**\n   * This method uses the createdAt and resolvedAt to calculate the\n   * animation startTime. *Ideally*, we would use the createdAt time as t=0\n   * as the following frame would then be the first frame of the animation in\n   * progress, which would feel snappier.\n   *\n   * However, if there's a delay (main thread work) between the creation of\n   * the animation and the first commited frame, we prefer to use resolvedAt\n   * to avoid a sudden jump into the animation.\n   */\n\n\n  _createClass(BaseAnimation, [{\n    key: \"calcStartTime\",\n    value: function calcStartTime() {\n      if (!this.resolvedAt) return this.createdAt;\n      return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt;\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n\n  }, {\n    key: \"resolved\",\n    get: function get() {\n      if (!this._resolved && !this.hasAttemptedResolve) {\n        flushKeyframeResolvers();\n      }\n\n      return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n\n  }, {\n    key: \"onKeyframesResolved\",\n    value: function onKeyframesResolved(keyframes, finalKeyframe) {\n      this.resolvedAt = time.now();\n      this.hasAttemptedResolve = true;\n      var _this$options = this.options,\n          name = _this$options.name,\n          type = _this$options.type,\n          velocity = _this$options.velocity,\n          delay = _this$options.delay,\n          onComplete = _this$options.onComplete,\n          onUpdate = _this$options.onUpdate,\n          isGenerator = _this$options.isGenerator;\n      /**\n       * If we can't animate this value with the resolved keyframes\n       * then we should complete it immediately.\n       */\n\n      if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n        // Finish immediately\n        if (instantAnimationState.current || !delay) {\n          onUpdate && onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n          onComplete && onComplete();\n          this.resolveFinishedPromise();\n          return;\n        } // Finish after a delay\n        else {\n          this.options.duration = 0;\n        }\n      }\n\n      var resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n      if (resolvedAnimation === false) return;\n      this._resolved = _objectSpread({\n        keyframes: keyframes,\n        finalKeyframe: finalKeyframe\n      }, resolvedAnimation);\n      this.onPostResolved();\n    }\n  }, {\n    key: \"onPostResolved\",\n    value: function onPostResolved() {}\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n\n  }, {\n    key: \"then\",\n    value: function then(resolve, reject) {\n      return this.currentFinishedPromise.then(resolve, reject);\n    }\n  }, {\n    key: \"flatten\",\n    value: function flatten() {\n      this.options.type = \"keyframes\";\n      this.options.ease = \"linear\";\n    }\n  }, {\n    key: \"updateFinishedPromise\",\n    value: function updateFinishedPromise() {\n      var _this = this;\n\n      this.currentFinishedPromise = new Promise(function (resolve) {\n        _this.resolveFinishedPromise = resolve;\n      });\n    }\n  }]);\n\n  return BaseAnimation;\n}();\n\nexport { BaseAnimation };","map":{"version":3,"names":["time","flushKeyframeResolvers","instantAnimationState","canAnimate","getFinalKeyframe","MAX_RESOLVE_DELAY","BaseAnimation","autoplay","delay","type","repeat","repeatDelay","repeatType","options","isStopped","hasAttemptedResolve","createdAt","now","updateFinishedPromise","resolvedAt","_resolved","keyframes","finalKeyframe","name","velocity","onComplete","onUpdate","isGenerator","current","resolveFinishedPromise","duration","resolvedAnimation","initPlayback","onPostResolved","resolve","reject","currentFinishedPromise","then","ease","Promise"],"sources":["/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs"],"sourcesContent":["import { time } from '../../frameloop/sync-time.mjs';\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\n/**\n * Maximum time allowed between an animation being created and it being\n * resolved for us to use the latter as the start time.\n *\n * This is to ensure that while we prefer to \"start\" an animation as soon\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\n * between these two moments.\n */\nconst MAX_RESOLVE_DELAY = 40;\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.createdAt = time.now();\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * This method uses the createdAt and resolvedAt to calculate the\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\n     * as the following frame would then be the first frame of the animation in\n     * progress, which would feel snappier.\n     *\n     * However, if there's a delay (main thread work) between the creation of\n     * the animation and the first commited frame, we prefer to use resolvedAt\n     * to avoid a sudden jump into the animation.\n     */\n    calcStartTime() {\n        if (!this.resolvedAt)\n            return this.createdAt;\n        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY\n            ? this.resolvedAt\n            : this.createdAt;\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.resolvedAt = time.now();\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate &&\n                    onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    flatten() {\n        this.options.type = \"keyframes\";\n        this.options.ease = \"linear\";\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}