{"ast":null,"code":"import _objectWithoutProperties from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"willChange\"];\nimport { time } from '../frameloop/sync-time.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { transformProps } from './html/utils/keys-transform.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nvar propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nvar VisualElement = /*#__PURE__*/function () {\n  function VisualElement(_ref) {\n    var _this = this;\n\n    var parent = _ref.parent,\n        props = _ref.props,\n        presenceContext = _ref.presenceContext,\n        reducedMotionConfig = _ref.reducedMotionConfig,\n        blockInitialAnimation = _ref.blockInitialAnimation,\n        visualState = _ref.visualState;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VisualElement);\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = function () {\n      return _this.notify(\"Update\", _this.latestValues);\n    };\n\n    this.render = function () {\n      if (!_this.current) return;\n\n      _this.triggerBuild();\n\n      _this.renderInstance(_this.current, _this.renderState, _this.props.style, _this.projection);\n    };\n\n    this.renderScheduledAt = 0.0;\n\n    this.scheduleRender = function () {\n      var now = time.now();\n\n      if (_this.renderScheduledAt < now) {\n        _this.renderScheduledAt = now;\n        frame.render(_this.render, false, true);\n      }\n    };\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState,\n        onUpdate = visualState.onUpdate;\n    this.onUpdate = onUpdate;\n    this.latestValues = latestValues;\n    this.baseTarget = _objectSpread({}, latestValues);\n    this.initialValues = props.initial ? _objectSpread({}, latestValues) : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't necessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    var _this$scrapeMotionVal = this.scrapeMotionValuesFromProps(props, {}, this),\n        willChange = _this$scrapeMotionVal.willChange,\n        initialMotionValues = _objectWithoutProperties(_this$scrapeMotionVal, _excluded);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n\n  _createClass(VisualElement, [{\n    key: \"scrapeMotionValuesFromProps\",\n    value:\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    function scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n      return {};\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(instance) {\n      var _this2 = this;\n\n      this.current = instance;\n      visualElementStore.set(instance, this);\n\n      if (this.projection && !this.projection.instance) {\n        this.projection.mount(instance);\n      }\n\n      if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n        this.removeFromVariantTree = this.parent.addVariantChild(this);\n      }\n\n      this.values.forEach(function (value, key) {\n        return _this2.bindToMotionValue(key, value);\n      });\n\n      if (!hasReducedMotionListener.current) {\n        initPrefersReducedMotion();\n      }\n\n      this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n      }\n\n      if (this.parent) this.parent.children.add(this);\n      this.update(this.props, this.presenceContext);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.projection && this.projection.unmount();\n      cancelFrame(this.notifyUpdate);\n      cancelFrame(this.render);\n      this.valueSubscriptions.forEach(function (remove) {\n        return remove();\n      });\n      this.valueSubscriptions.clear();\n      this.removeFromVariantTree && this.removeFromVariantTree();\n      this.parent && this.parent.children.delete(this);\n\n      for (var key in this.events) {\n        this.events[key].clear();\n      }\n\n      for (var _key in this.features) {\n        var feature = this.features[_key];\n\n        if (feature) {\n          feature.unmount();\n          feature.isMounted = false;\n        }\n      }\n\n      this.current = null;\n    }\n  }, {\n    key: \"bindToMotionValue\",\n    value: function bindToMotionValue(key, value) {\n      var _this3 = this;\n\n      if (this.valueSubscriptions.has(key)) {\n        this.valueSubscriptions.get(key)();\n      }\n\n      var valueIsTransform = transformProps.has(key);\n\n      if (valueIsTransform && this.onBindTransform) {\n        this.onBindTransform();\n      }\n\n      var removeOnChange = value.on(\"change\", function (latestValue) {\n        _this3.latestValues[key] = latestValue;\n        _this3.props.onUpdate && frame.preRender(_this3.notifyUpdate);\n\n        if (valueIsTransform && _this3.projection) {\n          _this3.projection.isTransformDirty = true;\n        }\n      });\n      var removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n      var removeSyncCheck;\n\n      if (window.MotionCheckAppearSync) {\n        removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n      }\n\n      this.valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n        if (removeSyncCheck) removeSyncCheck();\n        if (value.owner) value.stop();\n      });\n    }\n  }, {\n    key: \"sortNodePosition\",\n    value: function sortNodePosition(other) {\n      /**\n       * If these nodes aren't even of the same type we can't compare their depth.\n       */\n      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n        return 0;\n      }\n\n      return this.sortInstanceNodePosition(this.current, other.current);\n    }\n  }, {\n    key: \"updateFeatures\",\n    value: function updateFeatures() {\n      var key = \"animation\";\n\n      for (key in featureDefinitions) {\n        var featureDefinition = featureDefinitions[key];\n        if (!featureDefinition) continue;\n        var isEnabled = featureDefinition.isEnabled,\n            FeatureConstructor = featureDefinition.Feature;\n        /**\n         * If this feature is enabled but not active, make a new instance.\n         */\n\n        if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n          this.features[key] = new FeatureConstructor(this);\n        }\n        /**\n         * If we have a feature, mount or update it.\n         */\n\n\n        if (this.features[key]) {\n          var feature = this.features[key];\n\n          if (feature.isMounted) {\n            feature.update();\n          } else {\n            feature.mount();\n            feature.isMounted = true;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"triggerBuild\",\n    value: function triggerBuild() {\n      this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n\n  }, {\n    key: \"measureViewportBox\",\n    value: function measureViewportBox() {\n      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n  }, {\n    key: \"getStaticValue\",\n    value: function getStaticValue(key) {\n      return this.latestValues[key];\n    }\n  }, {\n    key: \"setStaticValue\",\n    value: function setStaticValue(key, value) {\n      this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(props, presenceContext) {\n      if (props.transformTemplate || this.props.transformTemplate) {\n        this.scheduleRender();\n      }\n\n      this.prevProps = this.props;\n      this.props = props;\n      this.prevPresenceContext = this.presenceContext;\n      this.presenceContext = presenceContext;\n      /**\n       * Update prop event handlers ie onAnimationStart, onAnimationComplete\n       */\n\n      for (var i = 0; i < propEventHandlers.length; i++) {\n        var key = propEventHandlers[i];\n\n        if (this.propEventSubscriptions[key]) {\n          this.propEventSubscriptions[key]();\n          delete this.propEventSubscriptions[key];\n        }\n\n        var listenerName = \"on\" + key;\n        var listener = props[listenerName];\n\n        if (listener) {\n          this.propEventSubscriptions[key] = this.on(key, listener);\n        }\n      }\n\n      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n      if (this.handleChildMotionValue) {\n        this.handleChildMotionValue();\n      }\n\n      this.onUpdate && this.onUpdate(this);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(name) {\n      return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n\n  }, {\n    key: \"getDefaultTransition\",\n    value: function getDefaultTransition() {\n      return this.props.transition;\n    }\n  }, {\n    key: \"getTransformPagePoint\",\n    value: function getTransformPagePoint() {\n      return this.props.transformPagePoint;\n    }\n  }, {\n    key: \"getClosestVariantNode\",\n    value: function getClosestVariantNode() {\n      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n\n  }, {\n    key: \"addVariantChild\",\n    value: function addVariantChild(child) {\n      var closestVariantNode = this.getClosestVariantNode();\n\n      if (closestVariantNode) {\n        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n        return function () {\n          return closestVariantNode.variantChildren.delete(child);\n        };\n      }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n\n  }, {\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      // Remove existing value if it exists\n      var existingValue = this.values.get(key);\n\n      if (value !== existingValue) {\n        if (existingValue) this.removeValue(key);\n        this.bindToMotionValue(key, value);\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n      }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      this.values.delete(key);\n      var unsubscribe = this.valueSubscriptions.get(key);\n\n      if (unsubscribe) {\n        unsubscribe();\n        this.valueSubscriptions.delete(key);\n      }\n\n      delete this.latestValues[key];\n      this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(key) {\n      return this.values.has(key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key, defaultValue) {\n      if (this.props.values && this.props.values[key]) {\n        return this.props.values[key];\n      }\n\n      var value = this.values.get(key);\n\n      if (value === undefined && defaultValue !== undefined) {\n        value = motionValue(defaultValue === null ? undefined : defaultValue, {\n          owner: this\n        });\n        this.addValue(key, value);\n      }\n\n      return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n\n  }, {\n    key: \"readValue\",\n    value: function readValue(key, target) {\n      var _a;\n\n      var value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n      if (value !== undefined && value !== null) {\n        if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n          // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n          value = parseFloat(value);\n        } else if (!findValueType(value) && complex.test(target)) {\n          value = getAnimatableNone(key, target);\n        }\n\n        this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n      }\n\n      return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n\n  }, {\n    key: \"setBaseTarget\",\n    value: function setBaseTarget(key, value) {\n      this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n\n  }, {\n    key: \"getBaseTarget\",\n    value: function getBaseTarget(key) {\n      var _a;\n\n      var initial = this.props.initial;\n      var valueFromInitial;\n\n      if (typeof initial === \"string\" || typeof initial === \"object\") {\n        var variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n        if (variant) {\n          valueFromInitial = variant[key];\n        }\n      }\n      /**\n       * If this value still exists in the current initial variant, read that.\n       */\n\n\n      if (initial && valueFromInitial !== undefined) {\n        return valueFromInitial;\n      }\n      /**\n       * Alternatively, if this VisualElement config has defined a getBaseTarget\n       * so we can read the value from an alternative source, try that.\n       */\n\n\n      var target = this.getBaseTargetFromProps(this.props, key);\n      if (target !== undefined && !isMotionValue(target)) return target;\n      /**\n       * If the value was initially defined on initial, but it doesn't any more,\n       * return undefined. Otherwise return the value as initially read from the DOM.\n       */\n\n      return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n\n      return this.events[eventName].add(callback);\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(eventName) {\n      if (this.events[eventName]) {\n        var _this$events$eventNam;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        (_this$events$eventNam = this.events[eventName]).notify.apply(_this$events$eventNam, args);\n      }\n    }\n  }]);\n\n  return VisualElement;\n}();\n\nexport { VisualElement };","map":{"version":3,"names":["time","featureDefinitions","createBox","isNumericalString","isZeroValueString","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","warnOnce","motionValue","complex","isMotionValue","getAnimatableNone","findValueType","transformProps","visualElementStore","isControllingVariants","isVariantNode","KeyframeResolver","updateMotionValuesFromProps","resolveVariantFromProps","frame","cancelFrame","propEventHandlers","VisualElement","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","renderScheduledAt","scheduleRender","now","onUpdate","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","scrapeMotionValuesFromProps","willChange","initialMotionValues","key","value","undefined","set","_props","_prevProps","_visualElement","instance","mount","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","unmount","remove","clear","delete","feature","isMounted","has","get","valueIsTransform","onBindTransform","removeOnChange","on","latestValue","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","window","MotionCheckAppearSync","owner","stop","other","sortInstanceNodePosition","type","featureDefinition","isEnabled","FeatureConstructor","Feature","build","measureInstanceViewportBox","transformTemplate","prevProps","prevPresenceContext","i","length","listenerName","listener","handleChildMotionValue","name","variants","transition","transformPagePoint","getClosestVariantNode","child","closestVariantNode","existingValue","removeValue","unsubscribe","removeValueFromRenderState","defaultValue","addValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"sources":["/Users/karthikgurram/Public/portfolio/web-dev-projects/personal-portfolio/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { time } from '../frameloop/sync-time.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { transformProps } from './html/utils/keys-transform.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState, onUpdate } = visualState;\n        this.onUpdate = onUpdate;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n        this.onUpdate && this.onUpdate(this);\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"],"mappings":";;;;;AAAA,SAASA,IAAT,QAAqB,4BAArB;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,wBAAT,QAAyC,mCAAzC;AACA,SAASC,wBAAT,EAAmCC,oBAAnC,QAA+D,mCAA/D;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,qBAAT,EAAgCC,aAAhC,QAAqD,qCAArD;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,wBAAnC;AAEA,IAAMC,iBAAiB,GAAG,CACtB,gBADsB,EAEtB,mBAFsB,EAGtB,QAHsB,EAItB,qBAJsB,EAKtB,eALsB,EAMtB,sBANsB,EAOtB,yBAPsB,CAA1B;AASA;AACA;AACA;AACA;;IACMC,a;EAWF,6BAAwH;IAAA;;IAAA,IAA1GC,MAA0G,QAA1GA,MAA0G;IAAA,IAAlGC,KAAkG,QAAlGA,KAAkG;IAAA,IAA3FC,eAA2F,QAA3FA,eAA2F;IAAA,IAA1EC,mBAA0E,QAA1EA,mBAA0E;IAAA,IAArDC,qBAAqD,QAArDA,qBAAqD;IAAA,IAA9BC,WAA8B,QAA9BA,WAA8B;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAAA;;IACpH;AACR;AACA;AACA;IACQ,KAAKC,OAAL,GAAe,IAAf;IACA;AACR;AACA;;IACQ,KAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKjB,aAAL,GAAqB,KAArB;IACA,KAAKD,qBAAL,GAA6B,KAA7B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKmB,kBAAL,GAA0B,IAA1B;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;IACA,KAAKnB,gBAAL,GAAwBA,gBAAxB;IACA;AACR;AACA;;IACQ,KAAKoB,QAAL,GAAgB,EAAhB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,kBAAL,GAA0B,IAAIF,GAAJ,EAA1B;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKG,gBAAL,GAAwB,EAAxB;IACA;AACR;AACA;;IACQ,KAAKC,MAAL,GAAc,EAAd;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,sBAAL,GAA8B,EAA9B;;IACA,KAAKC,YAAL,GAAoB;MAAA,OAAM,KAAI,CAACC,MAAL,CAAY,QAAZ,EAAsB,KAAI,CAACC,YAA3B,CAAN;IAAA,CAApB;;IACA,KAAKC,MAAL,GAAc,YAAM;MAChB,IAAI,CAAC,KAAI,CAACd,OAAV,EACI;;MACJ,KAAI,CAACe,YAAL;;MACA,KAAI,CAACC,cAAL,CAAoB,KAAI,CAAChB,OAAzB,EAAkC,KAAI,CAACiB,WAAvC,EAAoD,KAAI,CAACvB,KAAL,CAAWwB,KAA/D,EAAsE,KAAI,CAACC,UAA3E;IACH,CALD;;IAMA,KAAKC,iBAAL,GAAyB,GAAzB;;IACA,KAAKC,cAAL,GAAsB,YAAM;MACxB,IAAMC,GAAG,GAAGvD,IAAI,CAACuD,GAAL,EAAZ;;MACA,IAAI,KAAI,CAACF,iBAAL,GAAyBE,GAA7B,EAAkC;QAC9B,KAAI,CAACF,iBAAL,GAAyBE,GAAzB;QACAjC,KAAK,CAACyB,MAAN,CAAa,KAAI,CAACA,MAAlB,EAA0B,KAA1B,EAAiC,IAAjC;MACH;IACJ,CAND;;IAOA,IAAQD,YAAR,GAAgDf,WAAhD,CAAQe,YAAR;IAAA,IAAsBI,WAAtB,GAAgDnB,WAAhD,CAAsBmB,WAAtB;IAAA,IAAmCM,QAAnC,GAAgDzB,WAAhD,CAAmCyB,QAAnC;IACA,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKV,YAAL,GAAoBA,YAApB;IACA,KAAKW,UAAL,qBAAuBX,YAAvB;IACA,KAAKY,aAAL,GAAqB/B,KAAK,CAACgC,OAAN,qBAAqBb,YAArB,IAAsC,EAA3D;IACA,KAAKI,WAAL,GAAmBA,WAAnB;IACA,KAAKxB,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,eAAL,GAAuBA,eAAvB;IACA,KAAKgC,KAAL,GAAalC,MAAM,GAAGA,MAAM,CAACkC,KAAP,GAAe,CAAlB,GAAsB,CAAzC;IACA,KAAK/B,mBAAL,GAA2BA,mBAA3B;IACA,KAAKG,OAAL,GAAeA,OAAf;IACA,KAAKF,qBAAL,GAA6B+B,OAAO,CAAC/B,qBAAD,CAApC;IACA,KAAKb,qBAAL,GAA6BA,qBAAqB,CAACU,KAAD,CAAlD;IACA,KAAKT,aAAL,GAAqBA,aAAa,CAACS,KAAD,CAAlC;;IACA,IAAI,KAAKT,aAAT,EAAwB;MACpB,KAAK4C,eAAL,GAAuB,IAAI3B,GAAJ,EAAvB;IACH;;IACD,KAAK4B,sBAAL,GAA8BF,OAAO,CAACnC,MAAM,IAAIA,MAAM,CAACO,OAAlB,CAArC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,4BAA+C,KAAK+B,2BAAL,CAAiCrC,KAAjC,EAAwC,EAAxC,EAA4C,IAA5C,CAA/C;IAAA,IAAQsC,UAAR,yBAAQA,UAAR;IAAA,IAAuBC,mBAAvB;;IACA,KAAK,IAAMC,GAAX,IAAkBD,mBAAlB,EAAuC;MACnC,IAAME,KAAK,GAAGF,mBAAmB,CAACC,GAAD,CAAjC;;MACA,IAAIrB,YAAY,CAACqB,GAAD,CAAZ,KAAsBE,SAAtB,IAAmCzD,aAAa,CAACwD,KAAD,CAApD,EAA6D;QACzDA,KAAK,CAACE,GAAN,CAAUxB,YAAY,CAACqB,GAAD,CAAtB,EAA6B,KAA7B;MACH;IACJ;EACJ;;;;;IApHD;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,qCAA4BI,MAA5B,EAAoCC,UAApC,EAAgDC,cAAhD,EAAgE;MAC5D,OAAO,EAAP;IACH;;;WA4GD,eAAMC,QAAN,EAAgB;MAAA;;MACZ,KAAKzC,OAAL,GAAeyC,QAAf;MACA1D,kBAAkB,CAACsD,GAAnB,CAAuBI,QAAvB,EAAiC,IAAjC;;MACA,IAAI,KAAKtB,UAAL,IAAmB,CAAC,KAAKA,UAAL,CAAgBsB,QAAxC,EAAkD;QAC9C,KAAKtB,UAAL,CAAgBuB,KAAhB,CAAsBD,QAAtB;MACH;;MACD,IAAI,KAAKhD,MAAL,IAAe,KAAKR,aAApB,IAAqC,CAAC,KAAKD,qBAA/C,EAAsE;QAClE,KAAK2D,qBAAL,GAA6B,KAAKlD,MAAL,CAAYmD,eAAZ,CAA4B,IAA5B,CAA7B;MACH;;MACD,KAAKxC,MAAL,CAAYyC,OAAZ,CAAoB,UAACV,KAAD,EAAQD,GAAR;QAAA,OAAgB,MAAI,CAACY,iBAAL,CAAuBZ,GAAvB,EAA4BC,KAA5B,CAAhB;MAAA,CAApB;;MACA,IAAI,CAAC9D,wBAAwB,CAAC2B,OAA9B,EAAuC;QACnC5B,wBAAwB;MAC3B;;MACD,KAAK+B,kBAAL,GACI,KAAKP,mBAAL,KAA6B,OAA7B,GACM,KADN,GAEM,KAAKA,mBAAL,KAA6B,QAA7B,GACI,IADJ,GAEItB,oBAAoB,CAAC0B,OALnC;;MAMA,IAAI+C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvCzE,QAAQ,CAAC,KAAK2B,kBAAL,KAA4B,IAA7B,EAAmC,wFAAnC,CAAR;MACH;;MACD,IAAI,KAAKV,MAAT,EACI,KAAKA,MAAL,CAAYQ,QAAZ,CAAqBiD,GAArB,CAAyB,IAAzB;MACJ,KAAKC,MAAL,CAAY,KAAKzD,KAAjB,EAAwB,KAAKC,eAA7B;IACH;;;WACD,mBAAU;MACN,KAAKwB,UAAL,IAAmB,KAAKA,UAAL,CAAgBiC,OAAhB,EAAnB;MACA9D,WAAW,CAAC,KAAKqB,YAAN,CAAX;MACArB,WAAW,CAAC,KAAKwB,MAAN,CAAX;MACA,KAAKP,kBAAL,CAAwBsC,OAAxB,CAAgC,UAACQ,MAAD;QAAA,OAAYA,MAAM,EAAlB;MAAA,CAAhC;MACA,KAAK9C,kBAAL,CAAwB+C,KAAxB;MACA,KAAKX,qBAAL,IAA8B,KAAKA,qBAAL,EAA9B;MACA,KAAKlD,MAAL,IAAe,KAAKA,MAAL,CAAYQ,QAAZ,CAAqBsD,MAArB,CAA4B,IAA5B,CAAf;;MACA,KAAK,IAAMrB,GAAX,IAAkB,KAAKzB,MAAvB,EAA+B;QAC3B,KAAKA,MAAL,CAAYyB,GAAZ,EAAiBoB,KAAjB;MACH;;MACD,KAAK,IAAMpB,IAAX,IAAkB,KAAK5B,QAAvB,EAAiC;QAC7B,IAAMkD,OAAO,GAAG,KAAKlD,QAAL,CAAc4B,IAAd,CAAhB;;QACA,IAAIsB,OAAJ,EAAa;UACTA,OAAO,CAACJ,OAAR;UACAI,OAAO,CAACC,SAAR,GAAoB,KAApB;QACH;MACJ;;MACD,KAAKzD,OAAL,GAAe,IAAf;IACH;;;WACD,2BAAkBkC,GAAlB,EAAuBC,KAAvB,EAA8B;MAAA;;MAC1B,IAAI,KAAK5B,kBAAL,CAAwBmD,GAAxB,CAA4BxB,GAA5B,CAAJ,EAAsC;QAClC,KAAK3B,kBAAL,CAAwBoD,GAAxB,CAA4BzB,GAA5B;MACH;;MACD,IAAM0B,gBAAgB,GAAG9E,cAAc,CAAC4E,GAAf,CAAmBxB,GAAnB,CAAzB;;MACA,IAAI0B,gBAAgB,IAAI,KAAKC,eAA7B,EAA8C;QAC1C,KAAKA,eAAL;MACH;;MACD,IAAMC,cAAc,GAAG3B,KAAK,CAAC4B,EAAN,CAAS,QAAT,EAAmB,UAACC,WAAD,EAAiB;QACvD,MAAI,CAACnD,YAAL,CAAkBqB,GAAlB,IAAyB8B,WAAzB;QACA,MAAI,CAACtE,KAAL,CAAW6B,QAAX,IAAuBlC,KAAK,CAAC4E,SAAN,CAAgB,MAAI,CAACtD,YAArB,CAAvB;;QACA,IAAIiD,gBAAgB,IAAI,MAAI,CAACzC,UAA7B,EAAyC;UACrC,MAAI,CAACA,UAAL,CAAgB+C,gBAAhB,GAAmC,IAAnC;QACH;MACJ,CANsB,CAAvB;MAOA,IAAMC,qBAAqB,GAAGhC,KAAK,CAAC4B,EAAN,CAAS,eAAT,EAA0B,KAAK1C,cAA/B,CAA9B;MACA,IAAI+C,eAAJ;;MACA,IAAIC,MAAM,CAACC,qBAAX,EAAkC;QAC9BF,eAAe,GAAGC,MAAM,CAACC,qBAAP,CAA6B,IAA7B,EAAmCpC,GAAnC,EAAwCC,KAAxC,CAAlB;MACH;;MACD,KAAK5B,kBAAL,CAAwB8B,GAAxB,CAA4BH,GAA5B,EAAiC,YAAM;QACnC4B,cAAc;QACdK,qBAAqB;QACrB,IAAIC,eAAJ,EACIA,eAAe;QACnB,IAAIjC,KAAK,CAACoC,KAAV,EACIpC,KAAK,CAACqC,IAAN;MACP,CAPD;IAQH;;;WACD,0BAAiBC,KAAjB,EAAwB;MACpB;AACR;AACA;MACQ,IAAI,CAAC,KAAKzE,OAAN,IACA,CAAC,KAAK0E,wBADN,IAEA,KAAKC,IAAL,KAAcF,KAAK,CAACE,IAFxB,EAE8B;QAC1B,OAAO,CAAP;MACH;;MACD,OAAO,KAAKD,wBAAL,CAA8B,KAAK1E,OAAnC,EAA4CyE,KAAK,CAACzE,OAAlD,CAAP;IACH;;;WACD,0BAAiB;MACb,IAAIkC,GAAG,GAAG,WAAV;;MACA,KAAKA,GAAL,IAAYlE,kBAAZ,EAAgC;QAC5B,IAAM4G,iBAAiB,GAAG5G,kBAAkB,CAACkE,GAAD,CAA5C;QACA,IAAI,CAAC0C,iBAAL,EACI;QACJ,IAAQC,SAAR,GAAmDD,iBAAnD,CAAQC,SAAR;QAAA,IAA4BC,kBAA5B,GAAmDF,iBAAnD,CAAmBG,OAAnB;QACA;AACZ;AACA;;QACY,IAAI,CAAC,KAAKzE,QAAL,CAAc4B,GAAd,CAAD,IACA4C,kBADA,IAEAD,SAAS,CAAC,KAAKnF,KAAN,CAFb,EAE2B;UACvB,KAAKY,QAAL,CAAc4B,GAAd,IAAqB,IAAI4C,kBAAJ,CAAuB,IAAvB,CAArB;QACH;QACD;AACZ;AACA;;;QACY,IAAI,KAAKxE,QAAL,CAAc4B,GAAd,CAAJ,EAAwB;UACpB,IAAMsB,OAAO,GAAG,KAAKlD,QAAL,CAAc4B,GAAd,CAAhB;;UACA,IAAIsB,OAAO,CAACC,SAAZ,EAAuB;YACnBD,OAAO,CAACL,MAAR;UACH,CAFD,MAGK;YACDK,OAAO,CAACd,KAAR;YACAc,OAAO,CAACC,SAAR,GAAoB,IAApB;UACH;QACJ;MACJ;IACJ;;;WACD,wBAAe;MACX,KAAKuB,KAAL,CAAW,KAAK/D,WAAhB,EAA6B,KAAKJ,YAAlC,EAAgD,KAAKnB,KAArD;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqB;MACjB,OAAO,KAAKM,OAAL,GACD,KAAKiF,0BAAL,CAAgC,KAAKjF,OAArC,EAA8C,KAAKN,KAAnD,CADC,GAEDzB,SAAS,EAFf;IAGH;;;WACD,wBAAeiE,GAAf,EAAoB;MAChB,OAAO,KAAKrB,YAAL,CAAkBqB,GAAlB,CAAP;IACH;;;WACD,wBAAeA,GAAf,EAAoBC,KAApB,EAA2B;MACvB,KAAKtB,YAAL,CAAkBqB,GAAlB,IAAyBC,KAAzB;IACH;IACD;AACJ;AACA;AACA;;;;WACI,gBAAOzC,KAAP,EAAcC,eAAd,EAA+B;MAC3B,IAAID,KAAK,CAACwF,iBAAN,IAA2B,KAAKxF,KAAL,CAAWwF,iBAA1C,EAA6D;QACzD,KAAK7D,cAAL;MACH;;MACD,KAAK8D,SAAL,GAAiB,KAAKzF,KAAtB;MACA,KAAKA,KAAL,GAAaA,KAAb;MACA,KAAK0F,mBAAL,GAA2B,KAAKzF,eAAhC;MACA,KAAKA,eAAL,GAAuBA,eAAvB;MACA;AACR;AACA;;MACQ,KAAK,IAAI0F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9F,iBAAiB,CAAC+F,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;QAC/C,IAAMnD,GAAG,GAAG3C,iBAAiB,CAAC8F,CAAD,CAA7B;;QACA,IAAI,KAAK3E,sBAAL,CAA4BwB,GAA5B,CAAJ,EAAsC;UAClC,KAAKxB,sBAAL,CAA4BwB,GAA5B;UACA,OAAO,KAAKxB,sBAAL,CAA4BwB,GAA5B,CAAP;QACH;;QACD,IAAMqD,YAAY,GAAI,OAAOrD,GAA7B;QACA,IAAMsD,QAAQ,GAAG9F,KAAK,CAAC6F,YAAD,CAAtB;;QACA,IAAIC,QAAJ,EAAc;UACV,KAAK9E,sBAAL,CAA4BwB,GAA5B,IAAmC,KAAK6B,EAAL,CAAQ7B,GAAR,EAAasD,QAAb,CAAnC;QACH;MACJ;;MACD,KAAKhF,gBAAL,GAAwBrB,2BAA2B,CAAC,IAAD,EAAO,KAAK4C,2BAAL,CAAiCrC,KAAjC,EAAwC,KAAKyF,SAA7C,EAAwD,IAAxD,CAAP,EAAsE,KAAK3E,gBAA3E,CAAnD;;MACA,IAAI,KAAKiF,sBAAT,EAAiC;QAC7B,KAAKA,sBAAL;MACH;;MACD,KAAKlE,QAAL,IAAiB,KAAKA,QAAL,CAAc,IAAd,CAAjB;IACH;;;WACD,oBAAW;MACP,OAAO,KAAK7B,KAAZ;IACH;IACD;AACJ;AACA;;;;WACI,oBAAWgG,IAAX,EAAiB;MACb,OAAO,KAAKhG,KAAL,CAAWiG,QAAX,GAAsB,KAAKjG,KAAL,CAAWiG,QAAX,CAAoBD,IAApB,CAAtB,GAAkDtD,SAAzD;IACH;IACD;AACJ;AACA;;;;WACI,gCAAuB;MACnB,OAAO,KAAK1C,KAAL,CAAWkG,UAAlB;IACH;;;WACD,iCAAwB;MACpB,OAAO,KAAKlG,KAAL,CAAWmG,kBAAlB;IACH;;;WACD,iCAAwB;MACpB,OAAO,KAAK5G,aAAL,GACD,IADC,GAED,KAAKQ,MAAL,GACI,KAAKA,MAAL,CAAYqG,qBAAZ,EADJ,GAEI1D,SAJV;IAKH;IACD;AACJ;AACA;;;;WACI,yBAAgB2D,KAAhB,EAAuB;MACnB,IAAMC,kBAAkB,GAAG,KAAKF,qBAAL,EAA3B;;MACA,IAAIE,kBAAJ,EAAwB;QACpBA,kBAAkB,CAACnE,eAAnB,IACImE,kBAAkB,CAACnE,eAAnB,CAAmCqB,GAAnC,CAAuC6C,KAAvC,CADJ;QAEA,OAAO;UAAA,OAAMC,kBAAkB,CAACnE,eAAnB,CAAmC0B,MAAnC,CAA0CwC,KAA1C,CAAN;QAAA,CAAP;MACH;IACJ;IACD;AACJ;AACA;;;;WACI,kBAAS7D,GAAT,EAAcC,KAAd,EAAqB;MACjB;MACA,IAAM8D,aAAa,GAAG,KAAK7F,MAAL,CAAYuD,GAAZ,CAAgBzB,GAAhB,CAAtB;;MACA,IAAIC,KAAK,KAAK8D,aAAd,EAA6B;QACzB,IAAIA,aAAJ,EACI,KAAKC,WAAL,CAAiBhE,GAAjB;QACJ,KAAKY,iBAAL,CAAuBZ,GAAvB,EAA4BC,KAA5B;QACA,KAAK/B,MAAL,CAAYiC,GAAZ,CAAgBH,GAAhB,EAAqBC,KAArB;QACA,KAAKtB,YAAL,CAAkBqB,GAAlB,IAAyBC,KAAK,CAACwB,GAAN,EAAzB;MACH;IACJ;IACD;AACJ;AACA;;;;WACI,qBAAYzB,GAAZ,EAAiB;MACb,KAAK9B,MAAL,CAAYmD,MAAZ,CAAmBrB,GAAnB;MACA,IAAMiE,WAAW,GAAG,KAAK5F,kBAAL,CAAwBoD,GAAxB,CAA4BzB,GAA5B,CAApB;;MACA,IAAIiE,WAAJ,EAAiB;QACbA,WAAW;QACX,KAAK5F,kBAAL,CAAwBgD,MAAxB,CAA+BrB,GAA/B;MACH;;MACD,OAAO,KAAKrB,YAAL,CAAkBqB,GAAlB,CAAP;MACA,KAAKkE,0BAAL,CAAgClE,GAAhC,EAAqC,KAAKjB,WAA1C;IACH;IACD;AACJ;AACA;;;;WACI,kBAASiB,GAAT,EAAc;MACV,OAAO,KAAK9B,MAAL,CAAYsD,GAAZ,CAAgBxB,GAAhB,CAAP;IACH;;;WACD,kBAASA,GAAT,EAAcmE,YAAd,EAA4B;MACxB,IAAI,KAAK3G,KAAL,CAAWU,MAAX,IAAqB,KAAKV,KAAL,CAAWU,MAAX,CAAkB8B,GAAlB,CAAzB,EAAiD;QAC7C,OAAO,KAAKxC,KAAL,CAAWU,MAAX,CAAkB8B,GAAlB,CAAP;MACH;;MACD,IAAIC,KAAK,GAAG,KAAK/B,MAAL,CAAYuD,GAAZ,CAAgBzB,GAAhB,CAAZ;;MACA,IAAIC,KAAK,KAAKC,SAAV,IAAuBiE,YAAY,KAAKjE,SAA5C,EAAuD;QACnDD,KAAK,GAAG1D,WAAW,CAAC4H,YAAY,KAAK,IAAjB,GAAwBjE,SAAxB,GAAoCiE,YAArC,EAAmD;UAAE9B,KAAK,EAAE;QAAT,CAAnD,CAAnB;QACA,KAAK+B,QAAL,CAAcpE,GAAd,EAAmBC,KAAnB;MACH;;MACD,OAAOA,KAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUD,GAAV,EAAeqE,MAAf,EAAuB;MACnB,IAAIC,EAAJ;;MACA,IAAIrE,KAAK,GAAG,KAAKtB,YAAL,CAAkBqB,GAAlB,MAA2BE,SAA3B,IAAwC,CAAC,KAAKpC,OAA9C,GACN,KAAKa,YAAL,CAAkBqB,GAAlB,CADM,GAEN,CAACsE,EAAE,GAAG,KAAKC,sBAAL,CAA4B,KAAK/G,KAAjC,EAAwCwC,GAAxC,CAAN,MAAwD,IAAxD,IAAgEsE,EAAE,KAAK,KAAK,CAA5E,GAAgFA,EAAhF,GAAqF,KAAKE,qBAAL,CAA2B,KAAK1G,OAAhC,EAAyCkC,GAAzC,EAA8C,KAAKnC,OAAnD,CAF3F;;MAGA,IAAIoC,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;QACvC,IAAI,OAAOA,KAAP,KAAiB,QAAjB,KACCjE,iBAAiB,CAACiE,KAAD,CAAjB,IAA4BhE,iBAAiB,CAACgE,KAAD,CAD9C,CAAJ,EAC4D;UACxD;UACAA,KAAK,GAAGwE,UAAU,CAACxE,KAAD,CAAlB;QACH,CAJD,MAKK,IAAI,CAACtD,aAAa,CAACsD,KAAD,CAAd,IAAyBzD,OAAO,CAACkI,IAAR,CAAaL,MAAb,CAA7B,EAAmD;UACpDpE,KAAK,GAAGvD,iBAAiB,CAACsD,GAAD,EAAMqE,MAAN,CAAzB;QACH;;QACD,KAAKM,aAAL,CAAmB3E,GAAnB,EAAwBvD,aAAa,CAACwD,KAAD,CAAb,GAAuBA,KAAK,CAACwB,GAAN,EAAvB,GAAqCxB,KAA7D;MACH;;MACD,OAAOxD,aAAa,CAACwD,KAAD,CAAb,GAAuBA,KAAK,CAACwB,GAAN,EAAvB,GAAqCxB,KAA5C;IACH;IACD;AACJ;AACA;AACA;;;;WACI,uBAAcD,GAAd,EAAmBC,KAAnB,EAA0B;MACtB,KAAKX,UAAL,CAAgBU,GAAhB,IAAuBC,KAAvB;IACH;IACD;AACJ;AACA;AACA;;;;WACI,uBAAcD,GAAd,EAAmB;MACf,IAAIsE,EAAJ;;MACA,IAAQ9E,OAAR,GAAoB,KAAKhC,KAAzB,CAAQgC,OAAR;MACA,IAAIoF,gBAAJ;;MACA,IAAI,OAAOpF,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAP,KAAmB,QAAtD,EAAgE;QAC5D,IAAMqF,OAAO,GAAG3H,uBAAuB,CAAC,KAAKM,KAAN,EAAagC,OAAb,EAAsB,CAAC8E,EAAE,GAAG,KAAK7G,eAAX,MAAgC,IAAhC,IAAwC6G,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAACQ,MAA1F,CAAvC;;QACA,IAAID,OAAJ,EAAa;UACTD,gBAAgB,GAAGC,OAAO,CAAC7E,GAAD,CAA1B;QACH;MACJ;MACD;AACR;AACA;;;MACQ,IAAIR,OAAO,IAAIoF,gBAAgB,KAAK1E,SAApC,EAA+C;QAC3C,OAAO0E,gBAAP;MACH;MACD;AACR;AACA;AACA;;;MACQ,IAAMP,MAAM,GAAG,KAAKE,sBAAL,CAA4B,KAAK/G,KAAjC,EAAwCwC,GAAxC,CAAf;MACA,IAAIqE,MAAM,KAAKnE,SAAX,IAAwB,CAACzD,aAAa,CAAC4H,MAAD,CAA1C,EACI,OAAOA,MAAP;MACJ;AACR;AACA;AACA;;MACQ,OAAO,KAAK9E,aAAL,CAAmBS,GAAnB,MAA4BE,SAA5B,IACH0E,gBAAgB,KAAK1E,SADlB,GAEDA,SAFC,GAGD,KAAKZ,UAAL,CAAgBU,GAAhB,CAHN;IAIH;;;WACD,YAAG+E,SAAH,EAAcC,QAAd,EAAwB;MACpB,IAAI,CAAC,KAAKzG,MAAL,CAAYwG,SAAZ,CAAL,EAA6B;QACzB,KAAKxG,MAAL,CAAYwG,SAAZ,IAAyB,IAAI1I,mBAAJ,EAAzB;MACH;;MACD,OAAO,KAAKkC,MAAL,CAAYwG,SAAZ,EAAuB/D,GAAvB,CAA2BgE,QAA3B,CAAP;IACH;;;WACD,gBAAOD,SAAP,EAA2B;MACvB,IAAI,KAAKxG,MAAL,CAAYwG,SAAZ,CAAJ,EAA4B;QAAA;;QAAA,kCADXE,IACW;UADXA,IACW;QAAA;;QACxB,8BAAK1G,MAAL,CAAYwG,SAAZ,GAAuBrG,MAAvB,8BAAiCuG,IAAjC;MACH;IACJ;;;;;;AAGL,SAAS3H,aAAT"},"metadata":{},"sourceType":"module"}